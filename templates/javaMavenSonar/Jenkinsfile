def scmVars

pipeline {
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '5', artifactNumToKeepStr: '5', daysToKeepStr: '5', numToKeepStr: '5')
        timeout(15)
    }
    libraries {
        lib('core@master')
        lib('maven@master')
    }
    agent any
    stages {
        stage('Test versions') {
            steps {
                container('maven') {
                    sh 'uname -a'
                    sh 'mvn -version'
                }
            }
        }
        stage('Checkout') {
            steps {
                script {
                    scmVars = checkout scm
                }
                echo "scmVars=${scmVars}"
                //gitRemoteConfig('joostvdg', 'maven-demo-lib', 'githubtoken')
                gitRemoteConfigByUrl(scmVars.GIT_URL, 'githubtoken')
                sh '''
                git config --global user.email "jenkins@jenkins.io"
                git config --global user.name "Jenkins"
                '''
                //sh 'env'
            }
        }
        stage('Build') {
            steps {
                container('maven') {
                    sh 'mvn clean verify -C -e'
                }
            }
        }
        stage('Version & Analysis') {
            parallel {
                stage('Version Bump') {
                    when { branch 'master' }
                    environment {
                        NEW_VERSION = gitNextSemverTagMaven('pom.xml')
                    }
                    steps {
                        container('maven') {
                            sh 'mvn versions:set -DnewVersion=${NEW_VERSION}'
                        }
                        gitTag("v${NEW_VERSION}")
                    }
                }
                stage('Sonar Analysis') {
                    when {branch 'master'}
                    environment {
                        SONARCLOUD_TOKEN = credentials('sonarcloud')
                    }
                    steps {
                        container('maven') {
                            sh 'mvn sonar:sonar -Dsonar.host.url=${SONAR_HOST} -Dsonar.login=${SONAR_TOKEN}'
                        }
                        container('sonar') {
                            // because the workspace is automatically mounted via the jnlp agent
                            // and the sonar scanner image is fixed on /root/src, we first create a symlink
                            sh "ln -s ${WORKSPACE} /root/src"
                            sh '''sonar-scanner \
                                -Dsonar.projectName=cat-nip \
                                -Dsonar.projectKey=joostvdg_cat-nip \
                                -Dsonar.organization=joostvdg-github \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=https://sonarcloud.io \
                                -Dsonar.login=${SONARCLOUD_TOKEN} 
                            '''
                        }
                    }
                }
            }
        }
        stage('Publish Artifact') {
            when { branch 'master' }
            steps {
                container('maven') {
                    // #1 = credentialsId for artifactory
                    // #2 = distributionManagement.id
                    generateMavenSettings('artifactory', 'releases')
                    sh 'mvn deploy -s jenkins-settings.xml'
                }
            }
            post {
                always {
                    cleanMavenSettings()
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
